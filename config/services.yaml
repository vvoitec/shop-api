# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Web\Controller\:
        resource: '../src/Web/Controller/'
        tags: ['controller.service_arguments']

    # Command handlers:
    'App\Backend\Products\Application\Create\CreateProductCommandHandler':
        public: true
    'App\Backend\Products\Application\Update\UpdateProductCommandHandler':
        public: true
    'App\Backend\Products\Application\Remove\RemoveProductCommandHandler':
        public: true
    'App\Backend\Cart\Application\Create\CreateCartCommandHandler':
        public: true
    'App\Backend\Cart\Application\AddProduct\AddProductToCartCommandHandler':
        public: true

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Common\Domain\Bus\Command\CommandBus: '@App\Common\Infrastructure\Bus\Command\CommandBus'
    App\Backend\Products\Domain\ProductRepository: '@App\Backend\Products\Infrastructure\Persistence\ProductRepository'
    App\Backend\Products\Application\Search\ProductsSearcher:
        tags: ['searcher']
    App\Backend\Cart\Application\Search\CartSearcher:
        tags: [ 'searcher' ]

    App\Common\Infrastructure\Factory\SearcherFactory:
        arguments:
            - !tagged_iterator searcher
    App\Common\Infrastructure\Validation\ApplicationExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onException }